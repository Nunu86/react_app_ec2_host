on:
  push:
    branches:
      - main

env:
  ECR_REPO_URI: "621214085626.dkr.ecr.us-east-1.amazonaws.com"
  ECR_REPO: "621214085626.dkr.ecr.us-east-1.amazonaws.com/nunuokorie/react_app"
  ECS_CLUSTER: "polite-elephant-11u324"
  ECS_SERVICE: "my_react_td-service-fvw025pv"
  ECS_TASK_DEFINITION: "my_react_td"
  newImage: "$ECR_REPO:${{github.run_number}}"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18.14.0" # Specify the Node.js version

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test -- --forceExit

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Replace with your AWS region

      - name: Log in to ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REPO_URI

      - name: Build the application with docker
        run: |
          docker build -t $ECR_REPO:${{github.run_number}} .
          docker push $ECR_REPO:${{ github.run_number }}

      - name: Describe task definition
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION > task_definition.json
          jq --arg Image "$newImage" \
          '.taskDefinition
          | .containerDefinitions[0].image = $Image
          | del(.taskDefinitionArn, .revision, .status, .requiresAttributes,
          .compatibilities, .registeredAt, .registeredBy)' \
          task_definition.json > updated_task_definition.json

      - name: Register ECS task definition
        run: |
          aws ecs register-task-definition \
            --cli-input-json file://updated_task_definition.json

      - name: update ECS service
        run: |
          aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --task-definition $ECS_TASK_DEFINITION \
           --service $ECS_SERVICE

      - name: Wait for ECS service to stabilize
        run: |
          aws ecs wait services-stable \
          --cluster $ECS_CLUSTER \
          --services $ECS_SERVICE

      - name: Cleanup
        run: |
          rm task_definition.json updated_task_definition.json  
          docker rmi $ECR_REPO:${{ github.run_number }} || true
          docker rmi $ECR_REPO:latest || true
          docker system prune -f || true
